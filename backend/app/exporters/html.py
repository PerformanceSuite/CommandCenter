"""
HTML exporter for self-contained interactive reports.

Generates single-file HTML reports with embedded CSS and JavaScript.
No external dependencies required - can be opened directly in browser.
"""

from typing import Any, Dict, List
from datetime import datetime
import json

from app.exporters import BaseExporter


class HTMLExporter(BaseExporter):
    """
    Export analysis results to self-contained HTML format.

    Features:
    - Interactive charts (Chart.js CDN)
    - Responsive design
    - Dark/light mode toggle
    - Print-friendly styles
    - No server required
    """

    def export(self) -> str:
        """
        Export analysis to HTML format.

        Returns:
            Complete HTML document as string
        """
        technologies = self._get_technology_list()
        dependencies = self._get_dependency_list()
        metrics = self._get_metrics()
        research_gaps = self._get_research_gaps_list()

        return self._generate_html(technologies, dependencies, metrics, research_gaps)

    def _generate_html(
        self,
        technologies: List[Dict[str, Any]],
        dependencies: List[Dict[str, Any]],
        metrics: Dict[str, Any],
        research_gaps: List[Dict[str, Any]],
    ) -> str:
        """
        Generate complete HTML document.

        Args:
            technologies: List of detected technologies
            dependencies: List of dependencies
            metrics: Code metrics
            research_gaps: List of research gaps

        Returns:
            HTML string
        """
        tech_data = self._prepare_chart_data(technologies)
        dep_status_data = self._prepare_dependency_status_data(dependencies)

        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CommandCenter Analysis Report - {self.project_path}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    {self._get_styles()}
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <h1>ðŸŽ¯ CommandCenter Analysis Report</h1>
                <div class="metadata">
                    <span><strong>Project:</strong> {self.project_path}</span>
                    <span><strong>Analyzed:</strong> {self._format_datetime(self.analyzed_at)}</span>
                    <button class="theme-toggle" onclick="toggleTheme()">ðŸŒ“ Toggle Theme</button>
                </div>
            </div>
        </header>

        <main>
            {self._generate_summary_section(technologies, dependencies, research_gaps)}
            {self._generate_technologies_section(technologies, tech_data)}
            {self._generate_dependencies_section(dependencies, dep_status_data)}
            {self._generate_metrics_section(metrics)}
            {self._generate_research_gaps_section(research_gaps)}
        </main>

        <footer>
            <p>Generated by CommandCenter v2.0.0 | Â© {datetime.utcnow().year}</p>
        </footer>
    </div>

    {self._get_scripts(tech_data, dep_status_data)}
</body>
</html>"""
        return html

    def _generate_summary_section(
        self,
        technologies: List[Dict[str, Any]],
        dependencies: List[Dict[str, Any]],
        research_gaps: List[Dict[str, Any]],
    ) -> str:
        """Generate summary metrics section."""
        outdated_count = sum(1 for d in dependencies if d.get("is_outdated", False))

        return f"""
        <section class="summary-section">
            <h2>ðŸ“Š Summary</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">{len(technologies)}</div>
                    <div class="metric-label">Technologies Detected</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{len(dependencies)}</div>
                    <div class="metric-label">Dependencies</div>
                </div>
                <div class="metric-card {('warning' if outdated_count > 0 else '')}">
                    <div class="metric-value">{outdated_count}</div>
                    <div class="metric-label">Outdated Dependencies</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{len(research_gaps)}</div>
                    <div class="metric-label">Research Gaps</div>
                </div>
            </div>
        </section>"""

    def _generate_technologies_section(
        self, technologies: List[Dict[str, Any]], chart_data: Dict[str, Any]
    ) -> str:
        """Generate technologies section with chart."""
        tech_rows = "\n".join(
            [
                f"""
            <tr>
                <td><strong>{tech.get('name', 'Unknown')}</strong></td>
                <td>{tech.get('version', 'N/A')}</td>
                <td>{tech.get('category', 'Unknown')}</td>
                <td><span class="badge confidence-{self._get_confidence_class(tech.get('confidence', 50))}">{tech.get('confidence', 50)}%</span></td>
            </tr>"""
                for tech in technologies
            ]
        )

        return f"""
        <section class="section">
            <h2>ðŸ”§ Detected Technologies</h2>
            <div class="chart-container">
                <canvas id="techChart"></canvas>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Technology</th>
                            <th>Version</th>
                            <th>Category</th>
                            <th>Confidence</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tech_rows if tech_rows else '<tr><td colspan="4" class="empty">No technologies detected</td></tr>'}
                    </tbody>
                </table>
            </div>
        </section>"""

    def _generate_dependencies_section(
        self, dependencies: List[Dict[str, Any]], chart_data: Dict[str, Any]
    ) -> str:
        """Generate dependencies section with status chart."""
        dep_rows = "\n".join(
            [
                f"""
            <tr class="{('outdated' if dep.get('is_outdated', False) else '')}">
                <td><strong>{dep.get('name', 'Unknown')}</strong></td>
                <td>{dep.get('current_version', 'N/A')}</td>
                <td>{dep.get('latest_version', 'N/A')}</td>
                <td><span class="badge status-{('outdated' if dep.get('is_outdated', False) else 'current')}">{('Outdated' if dep.get('is_outdated', False) else 'Current')}</span></td>
            </tr>"""
                for dep in dependencies
            ]
        )

        return f"""
        <section class="section">
            <h2>ðŸ“¦ Dependencies</h2>
            <div class="chart-container-small">
                <canvas id="depChart"></canvas>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Package</th>
                            <th>Current Version</th>
                            <th>Latest Version</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {dep_rows if dep_rows else '<tr><td colspan="4" class="empty">No dependencies found</td></tr>'}
                    </tbody>
                </table>
            </div>
        </section>"""

    def _generate_metrics_section(self, metrics: Dict[str, Any]) -> str:
        """Generate code metrics section."""
        loc = metrics.get("lines_of_code", 0)
        file_count = metrics.get("file_count", 0)
        complexity = metrics.get("complexity", 0)

        return f"""
        <section class="section">
            <h2>ðŸ“ˆ Code Metrics</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">{loc:,}</div>
                    <div class="metric-label">Lines of Code</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{file_count}</div>
                    <div class="metric-label">Files</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{complexity}</div>
                    <div class="metric-label">Complexity Score</div>
                </div>
            </div>
        </section>"""

    def _generate_research_gaps_section(
        self, research_gaps: List[Dict[str, Any]]
    ) -> str:
        """Generate research gaps section."""
        gap_cards = "\n".join(
            [
                f"""
            <div class="gap-card priority-{gap.get('priority', 3)}">
                <h4>{gap.get('title', 'Untitled Gap')}</h4>
                <p>{gap.get('description', 'No description')}</p>
                <div class="gap-meta">
                    <span class="badge">Priority: {gap.get('priority', 3)}</span>
                    <span class="badge">{gap.get('category', 'General')}</span>
                </div>
            </div>"""
                for gap in research_gaps
            ]
        )

        return f"""
        <section class="section">
            <h2>ðŸ”¬ Research Gaps</h2>
            <div class="gaps-container">
                {gap_cards if gap_cards else '<p class="empty">No research gaps identified</p>'}
            </div>
        </section>"""

    def _prepare_chart_data(self, technologies: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Prepare data for technology category chart."""
        categories = {}
        for tech in technologies:
            cat = tech.get("category", "Unknown")
            categories[cat] = categories.get(cat, 0) + 1

        return {
            "labels": list(categories.keys()),
            "data": list(categories.values()),
        }

    def _prepare_dependency_status_data(
        self, dependencies: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Prepare data for dependency status chart."""
        current = sum(1 for d in dependencies if not d.get("is_outdated", False))
        outdated = sum(1 for d in dependencies if d.get("is_outdated", False))

        return {
            "labels": ["Current", "Outdated"],
            "data": [current, outdated],
        }

    def _get_confidence_class(self, confidence: int) -> str:
        """Get CSS class for confidence level."""
        if confidence >= 80:
            return "high"
        elif confidence >= 50:
            return "medium"
        return "low"

    def _format_datetime(self, dt_str: str) -> str:
        """Format datetime string for display."""
        try:
            dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
            return dt.strftime("%Y-%m-%d %H:%M:%S UTC")
        except:
            return dt_str

    def _get_styles(self) -> str:
        """Get embedded CSS styles."""
        return """
    <style>
        :root {
            --primary: #3b82f6;
            --success: #10b981;
            --warning: #f59e0b;
            --error: #ef4444;
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --border: #e5e7eb;
        }

        [data-theme="dark"] {
            --bg-primary: #1f2937;
            --bg-secondary: #111827;
            --text-primary: #f9fafb;
            --text-secondary: #9ca3af;
            --border: #374151;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-secondary);
            color: var(--text-primary);
            line-height: 1.6;
            transition: background 0.3s, color 0.3s;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: var(--bg-primary);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        h1 {
            color: var(--primary);
            margin-bottom: 15px;
            font-size: 2em;
        }

        h2 {
            color: var(--text-primary);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--border);
        }

        .metadata {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            align-items: center;
            color: var(--text-secondary);
        }

        .theme-toggle {
            padding: 8px 16px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }

        .theme-toggle:hover {
            opacity: 0.9;
        }

        .section {
            background: var(--bg-primary);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .summary-section {
            background: linear-gradient(135deg, var(--primary) 0%, #1e40af 100%);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            color: white;
        }

        .summary-section h2 {
            color: white;
            border-bottom-color: rgba(255,255,255,0.3);
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .metric-card {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .summary-section .metric-card {
            background: rgba(255,255,255,0.15);
        }

        .metric-card.warning {
            background: rgba(239, 68, 68, 0.2);
            border: 2px solid var(--error);
        }

        .metric-value {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .metric-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .chart-container {
            max-width: 600px;
            margin: 30px auto;
            height: 300px;
        }

        .chart-container-small {
            max-width: 400px;
            margin: 30px auto;
            height: 250px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid var(--border);
        }

        th {
            background: var(--bg-secondary);
            font-weight: 600;
        }

        tr.outdated {
            background: rgba(239, 68, 68, 0.05);
        }

        .badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: 500;
        }

        .badge.confidence-high { background: var(--success); color: white; }
        .badge.confidence-medium { background: var(--warning); color: white; }
        .badge.confidence-low { background: var(--error); color: white; }
        .badge.status-current { background: var(--success); color: white; }
        .badge.status-outdated { background: var(--warning); color: white; }

        .gaps-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .gap-card {
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid var(--primary);
            background: var(--bg-secondary);
        }

        .gap-card h4 {
            margin-bottom: 10px;
            color: var(--text-primary);
        }

        .gap-card p {
            color: var(--text-secondary);
            margin-bottom: 15px;
        }

        .gap-meta {
            display: flex;
            gap: 10px;
        }

        .empty {
            text-align: center;
            color: var(--text-secondary);
            padding: 40px;
            font-style: italic;
        }

        footer {
            text-align: center;
            padding: 30px;
            color: var(--text-secondary);
            font-size: 0.9em;
        }

        @media print {
            body { background: white; color: black; }
            .theme-toggle { display: none; }
            .section { box-shadow: none; border: 1px solid #ddd; }
        }
    </style>"""

    def _get_scripts(self, tech_data: Dict[str, Any], dep_data: Dict[str, Any]) -> str:
        """Get embedded JavaScript for charts."""
        return f"""
    <script>
        // Theme toggle
        function toggleTheme() {{
            const html = document.documentElement;
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            html.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }}

        // Load saved theme
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);

        // Technology category chart
        const techCtx = document.getElementById('techChart');
        if (techCtx) {{
            new Chart(techCtx, {{
                type: 'bar',
                data: {{
                    labels: {json.dumps(tech_data['labels'])},
                    datasets: [{{
                        label: 'Technologies by Category',
                        data: {json.dumps(tech_data['data'])},
                        backgroundColor: '#3b82f6',
                        borderRadius: 6
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {{
                        legend: {{ display: false }}
                    }}
                }}
            }});
        }}

        // Dependency status chart
        const depCtx = document.getElementById('depChart');
        if (depCtx) {{
            new Chart(depCtx, {{
                type: 'doughnut',
                data: {{
                    labels: {json.dumps(dep_data['labels'])},
                    datasets: [{{
                        data: {json.dumps(dep_data['data'])},
                        backgroundColor: ['#10b981', '#f59e0b']
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false
                }}
            }});
        }}
    </script>"""


def export_to_html(project_analysis: Dict[str, Any]) -> str:
    """
    Convenience function to export analysis to HTML format.

    Args:
        project_analysis: Analysis results dictionary

    Returns:
        Complete HTML document as string
    """
    exporter = HTMLExporter(project_analysis)
    return exporter.export()
