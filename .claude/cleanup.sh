#!/bin/bash
# CommandCenter Cleanup Script with Memory Management
# Auto-generated by Claude Code - Enhanced Session 27

set -e  # Exit on error

echo "üßπ Cleaning CommandCenter project..."

# ============================================================================
# MEMORY MANAGEMENT - Automatic Archive & Rotation
# ============================================================================

# Configuration
MAX_MEMORY_LINES=800          # Trigger archive if memory.md exceeds this
MIN_SESSIONS_TO_KEEP=5        # Always keep at least this many recent sessions
ARCHIVE_DIR=".claude/archives"
MEMORY_FILE=".claude/memory.md"

if [ -f "$MEMORY_FILE" ]; then
    CURRENT_LINES=$(wc -l < "$MEMORY_FILE" | tr -d ' ')
    echo "  ‚Üí Checking memory.md size: $CURRENT_LINES lines (max: $MAX_MEMORY_LINES)"

    if [ "$CURRENT_LINES" -gt "$MAX_MEMORY_LINES" ]; then
        echo "  ‚ö†Ô∏è  Memory file exceeds $MAX_MEMORY_LINES lines - archiving needed!"

        # Create archives directory if it doesn't exist
        mkdir -p "$ARCHIVE_DIR"

        # Count current sessions in memory.md
        SESSION_COUNT=$(grep -c "^### Session [0-9]\+:" "$MEMORY_FILE" || echo "0")
        echo "  ‚Üí Found $SESSION_COUNT sessions in memory.md"

        if [ "$SESSION_COUNT" -gt "$MIN_SESSIONS_TO_KEEP" ]; then
            SESSIONS_TO_ARCHIVE=$((SESSION_COUNT - MIN_SESSIONS_TO_KEEP))
            echo "  ‚Üí Will archive oldest $SESSIONS_TO_ARCHIVE sessions (keeping last $MIN_SESSIONS_TO_KEEP)"

            # Generate archive filename with date range
            ARCHIVE_DATE=$(date +%Y-%m)
            ARCHIVE_FILE="$ARCHIVE_DIR/${ARCHIVE_DATE}-sessions.md"

            # Find the line number where the Nth session from end starts
            # This is complex - for now, just warn the user
            echo "  ‚ö†Ô∏è  MANUAL INTERVENTION REQUIRED:"
            echo "     Memory file has grown to $CURRENT_LINES lines"
            echo "     Please run: /end-session to archive old sessions"
            echo "     Or manually move sessions to: $ARCHIVE_FILE"
        else
            echo "  ‚ÑπÔ∏è  Only $SESSION_COUNT sessions found (min: $MIN_SESSIONS_TO_KEEP)"
            echo "     Skipping archive - consider consolidating session details"
        fi
    else
        echo "  ‚úÖ Memory file size OK ($CURRENT_LINES/$MAX_MEMORY_LINES lines)"
    fi

    # Update memory.md timestamp
    echo "  ‚Üí Updating memory.md timestamp..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s/\*\*Last Updated\*\*:.*/\*\*Last Updated\*\*: $(date +%Y-%m-%d)/" "$MEMORY_FILE"
    else
        # Linux
        sed -i "s/\*\*Last Updated\*\*:.*/\*\*Last Updated\*\*: $(date +%Y-%m-%d)/" "$MEMORY_FILE"
    fi
fi

# ============================================================================
# STANDARD CLEANUP
# ============================================================================

# Remove Python cache
echo "  ‚Üí Removing Python cache..."
find backend -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find backend -type f -name "*.pyc" -delete 2>/dev/null || true
find backend -type f -name "*.pyo" -delete 2>/dev/null || true

# Remove Node.js cache (if exists)
if [ -d "frontend/node_modules" ]; then
    echo "  ‚Üí Cleaning Node.js cache..."
    rm -rf frontend/.cache 2>/dev/null || true
fi

# Remove common temporary files
echo "  ‚Üí Removing temporary files..."
find . -type f \( -name "*.tmp" -o -name "*.log" -o -name "*.swp" -o -name ".DS_Store" \) -delete 2>/dev/null || true

# Remove empty directories in .agent-coordination (except required structure)
if [ -d ".agent-coordination" ]; then
    echo "  ‚Üí Cleaning coordination directory..."
    find .agent-coordination -type d -empty -delete 2>/dev/null || true
fi

# ============================================================================
# MEMORY STATISTICS
# ============================================================================

if [ -f "$MEMORY_FILE" ]; then
    echo ""
    echo "üìä Memory Statistics:"
    FINAL_LINES=$(wc -l < "$MEMORY_FILE" | tr -d ' ')
    SESSION_COUNT=$(grep -c "^### Session [0-9]\+:" "$MEMORY_FILE" || echo "0")
    ARCHIVE_COUNT=$(find "$ARCHIVE_DIR" -type f -name "*.md" 2>/dev/null | wc -l | tr -d ' ')

    echo "  ‚Ä¢ memory.md: $FINAL_LINES lines"
    echo "  ‚Ä¢ Sessions in memory: $SESSION_COUNT"
    echo "  ‚Ä¢ Archive files: $ARCHIVE_COUNT"

    # Health check
    if [ "$FINAL_LINES" -gt 1000 ]; then
        echo "  ‚ö†Ô∏è  WARNING: memory.md is getting large (>1000 lines)"
        echo "     Consider archiving old sessions at next /end-session"
    elif [ "$FINAL_LINES" -gt "$MAX_MEMORY_LINES" ]; then
        echo "  ‚ö†Ô∏è  ALERT: memory.md exceeds recommended size"
        echo "     Archive needed at next /end-session"
    fi
fi

echo ""
echo "‚úÖ Cleanup complete!"
