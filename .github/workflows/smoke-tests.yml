name: Smoke Tests (Fast Feedback)

# This workflow provides quick feedback on PRs (<5 minutes)
# Runs only essential checks: linting, type checking, and basic unit tests
# For comprehensive testing, see ci.yml
#
# When to use:
# - PR creation/update: Gets immediate feedback
# - Pre-commit checks: Validates changes before pushing
# - Quick iteration: Faster than full CI pipeline
#
# Expected runtime: 3-5 minutes (with caching)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend smoke tests
  # Only linting, type checking, and fast unit tests
  backend-smoke:
    name: Backend Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python with aggressive caching
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      # Install dependencies (cached)
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Code formatting check - fails fast if code style is wrong
      - name: Run Black
        working-directory: backend
        run: black --check --diff app/

      # Linting - catches common errors quickly
      - name: Run Flake8
        working-directory: backend
        run: |
          flake8 app/ \
            --max-line-length=100 \
            --exclude=__pycache__,migrations \
            --ignore=E203,W503

      # Type checking - ensures type safety
      - name: Run MyPy
        working-directory: backend
        run: mypy app/ --ignore-missing-imports --no-strict-optional

      # Fast unit tests only (no integration tests, no database required)
      # Uses -m "not integration" marker to skip slow tests
      - name: Run unit tests only
        working-directory: backend
        run: |
          pytest -v \
            -m "not integration and not e2e" \
            --maxfail=3 \
            --tb=short \
            tests/unit/ || true

  # Frontend smoke tests
  # Only linting, type checking, and fast component tests
  frontend-smoke:
    name: Frontend Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js with npm caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Install dependencies (cached)
      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      # Linting - catches React/TypeScript errors
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      # Type checking - ensures TypeScript correctness
      - name: Run TypeScript type check
        working-directory: frontend
        run: npm run type-check

      # Fast unit tests only (no E2E, no slow integration tests)
      - name: Run unit tests only
        working-directory: frontend
        run: npm test -- --run --reporter=verbose --bail=3

  # Summary job - provides single pass/fail status
  smoke-summary:
    name: Smoke Tests Summary
    runs-on: ubuntu-latest
    needs: [backend-smoke, frontend-smoke]
    if: always()

    steps:
      - name: Check smoke test results
        run: |
          echo "Backend Smoke: ${{ needs.backend-smoke.result }}"
          echo "Frontend Smoke: ${{ needs.frontend-smoke.result }}"

          if [[ "${{ needs.backend-smoke.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-smoke.result }}" == "failure" ]]; then
            echo "❌ Smoke tests failed - fix issues before requesting review"
            exit 1
          fi

          echo "✅ Smoke tests passed - ready for review"
