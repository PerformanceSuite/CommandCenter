name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: commandcenter
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: commandcenter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements-dev.txt'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpq-dev \
            build-essential

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Create test environment file
        working-directory: backend
        run: |
          cat > .env.test <<EOF
          ENVIRONMENT=test
          DATABASE_URL=postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
          REDIS_URL=redis://localhost:6379/0
          SECRET_KEY=test-secret-key-for-ci-testing-only-min-32-chars
          CELERY_BROKER_URL=redis://localhost:6379/0
          CELERY_RESULT_BACKEND=redis://localhost:6379/1
          LOG_LEVEL=INFO
          EOF

      - name: Run database migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
        run: |
          alembic upgrade head

      - name: Run integration tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/1
        run: |
          pytest tests/integration/ \
            -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --tb=short \
            -m integration

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./backend/coverage.xml
          flags: integration
          name: integration-tests

      - name: Run export system tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
        run: |
          pytest tests/integration/test_export_integration.py -v --tb=short

      - name: Run WebSocket tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
        run: |
          pytest tests/integration/test_websocket_integration.py -v --tb=short

      - name: Run Celery tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://commandcenter:test_password@localhost:5432/commandcenter_test
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/1
        run: |
          pytest tests/integration/test_celery_integration.py -v --tb=short

      - name: Generate test summary
        if: always()
        working-directory: backend
        run: |
          echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pytest tests/integration/ --co -q 2>&1 | tee -a $GITHUB_STEP_SUMMARY || true

  integration-tests-fast:
    name: Fast Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run fast integration tests (in-memory DB)
        working-directory: backend
        run: |
          pytest tests/integration/ \
            -v \
            -m "integration and not slow" \
            --tb=short \
            --durations=10

  lint-tests:
    name: Lint Test Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements-dev.txt

      - name: Run Black on test code
        working-directory: backend
        run: |
          black --check tests/integration/

      - name: Run Flake8 on test code
        working-directory: backend
        run: |
          flake8 tests/integration/ --max-line-length=100

      - name: Run mypy on test code
        working-directory: backend
        run: |
          mypy tests/integration/ --ignore-missing-imports || true
