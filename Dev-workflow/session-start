#!/bin/bash
# Universal Session Start Script v3.0
# Smart session initialization

set -e

# Configuration
PROJECT_NAME=$(basename "$PWD")
DATE=$(date +"%B %d, %Y")
TIME=$(date +"%H:%M")

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Helper functions
print_header() { echo -e "\n${BLUE}${BOLD}=== $1 ===${NC}"; }
print_success() { echo -e "${GREEN}✓${NC} $1"; }
print_warning() { echo -e "${YELLOW}⚠${NC} $1"; }
print_info() { echo -e "${CYAN}ℹ${NC} $1"; }

# Start
print_header "Session Start"
echo -e "Project: ${BOLD}$PROJECT_NAME${NC}"
echo -e "Date: $DATE @ $TIME"

# Check git status
if [ -d ".git" ]; then
    BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
    print_info "Branch: $BRANCH"
    
    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "Uncommitted changes detected:"
        git status --short | head -10
        echo ""
    else
        print_success "Working directory clean"
    fi
    
    # Show recent commits
    echo ""
    echo "Recent commits:"
    git log --oneline -5 2>/dev/null || echo "No commits yet"
else
    print_warning "Not a git repository"
fi

# Check for last session
LAST_SESSION=$(ls -t .claude/logs/sessions/*.md 2>/dev/null | head -1)
if [ -n "$LAST_SESSION" ]; then
    echo ""
    print_info "Last session summary available:"
    echo -e "  ${CYAN}cat $LAST_SESSION${NC}"
    
    # Extract key info from last session
    if grep -q "## Work Completed" "$LAST_SESSION"; then
        echo ""
        echo "Last work completed:"
        sed -n '/## Work Completed/,/^##/p' "$LAST_SESSION" | head -5 | tail -4
    fi
fi

# Check environment
print_header "Environment Check"

# Node.js project
if [ -f "package.json" ]; then
    print_info "Node.js project detected"
    if [ -d "node_modules" ]; then
        print_success "Dependencies installed"
    else
        print_warning "Run: npm install"
    fi
    
    # Check for test script
    if grep -q '"test"' package.json; then
        print_success "Test script available: npm test"
    fi
fi

# Python project
if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
    print_info "Python project detected"
    if [ -d "venv" ] || [ -d ".venv" ]; then
        print_success "Virtual environment exists"
        print_info "Activate with: source venv/bin/activate"
    else
        print_warning "Create venv: python -m venv venv"
    fi
fi

# Rust project
if [ -f "Cargo.toml" ]; then
    print_info "Rust project detected"
    if [ -d "target" ]; then
        print_success "Build artifacts exist"
    fi
    print_info "Test with: cargo test"
fi

# Check for TODOs
TODO_COUNT=$(grep -r "TODO\|FIXME" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=venv . 2>/dev/null | wc -l | tr -d ' ' || echo "0")
if [ "$TODO_COUNT" -gt "0" ]; then
    echo ""
    print_warning "Found $TODO_COUNT TODO/FIXME markers"
    echo "Recent TODOs:"
    grep -r "TODO\|FIXME" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=venv . 2>/dev/null | head -3
fi

# Show available commands
print_header "Session Commands"
echo -e "  ${CYAN}./session-end \"Feature name\"${NC} - End session with summary"
echo -e "  ${CYAN}./session-status${NC}              - View project status"
echo -e "  ${CYAN}./session-memory${NC}              - View project memory"
echo -e "  ${CYAN}./session-last${NC}                - View last session"

# Show project structure
if [ -f ".claude/memory.md" ]; then
    echo ""
    print_success "Project memory available: .claude/memory.md"
fi

if [ -f "docs/STATUS.md" ]; then
    print_success "Project status available: docs/STATUS.md"
fi

# Ready message
echo ""
echo -e "${GREEN}${BOLD}✨ Session started! Ready for development.${NC}"
echo ""
echo -e "${BOLD}Quick actions:${NC}"
if [ -f "package.json" ] && [ ! -d "node_modules" ]; then
    echo -e "  1. ${CYAN}npm install${NC}"
fi
if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
    echo -e "  2. Review uncommitted changes"
fi
if [ "$TODO_COUNT" -gt "0" ]; then
    echo -e "  3. Address TODO items"
fi
echo -e "  4. Start coding!"
echo ""
echo -e "End with: ${CYAN}./session-end \"Feature description\"${NC}"
